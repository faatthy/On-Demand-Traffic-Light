
project_embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00001fd6  0000206a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080016a  0080016a  00002174  2**0
                  ALLOC
  3 .stab         00002508  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b27  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000051a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  00005323  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  000054f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  00007683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  000088af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000099b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  00009e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__vector_1>
       8:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_2>
       c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <main>
      8a:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__epilogue_restores__+0x18>

000007ea <__ltsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__ltsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__ltsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__ltsf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <Timer_enuInit>:
#include "../../LIBRARY/errorState.h"
#include"TIMER_priv.h"
#include "TIMER_conf.h"
#include"math.h"

ES_t Timer_enuInit(){
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enuerrorState=ES_OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	TCCR0 = 0x00;
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	10 82       	st	Z, r1
return local_enuerrorState;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <TIMER_delay>:

ES_t TIMER_delay(u16 copy_u16millisec){
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	63 97       	sbiw	r28, 0x13	; 19
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	9b 8b       	std	Y+19, r25	; 0x13
     e08:	8a 8b       	std	Y+18, r24	; 0x12
	ES_t local_enuerrorState=ES_OK;
     e0a:	19 8a       	std	Y+17, r1	; 0x11
	u16 local_u16Num_ov,local_u16TimeInitial;
	double local_doubleTimeMaxDelay,local_doubleTimetick;
	u32 local_u32OverFlowCounnt=0;
     e0c:	19 82       	std	Y+1, r1	; 0x01
     e0e:	1a 82       	std	Y+2, r1	; 0x02
     e10:	1b 82       	std	Y+3, r1	; 0x03
     e12:	1c 82       	std	Y+4, r1	; 0x04

	local_doubleTimetick = 256.0/1000.0;   // pres/F_CPU
     e14:	8f e6       	ldi	r24, 0x6F	; 111
     e16:	92 e1       	ldi	r25, 0x12	; 18
     e18:	a3 e8       	ldi	r26, 0x83	; 131
     e1a:	be e3       	ldi	r27, 0x3E	; 62
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	af 83       	std	Y+7, r26	; 0x07
     e22:	b8 87       	std	Y+8, r27	; 0x08

	local_doubleTimeMaxDelay= 256.0*local_doubleTimetick; //ms		Tmaxdelay = Ttick * 2^8
     e24:	6d 81       	ldd	r22, Y+5	; 0x05
     e26:	7e 81       	ldd	r23, Y+6	; 0x06
     e28:	8f 81       	ldd	r24, Y+7	; 0x07
     e2a:	98 85       	ldd	r25, Y+8	; 0x08
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e8       	ldi	r20, 0x80	; 128
     e32:	53 e4       	ldi	r21, 0x43	; 67
     e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	89 87       	std	Y+9, r24	; 0x09
     e3e:	9a 87       	std	Y+10, r25	; 0x0a
     e40:	ab 87       	std	Y+11, r26	; 0x0b
     e42:	bc 87       	std	Y+12, r27	; 0x0c
	if(copy_u16millisec<local_doubleTimeMaxDelay){
     e44:	8a 89       	ldd	r24, Y+18	; 0x12
     e46:	9b 89       	ldd	r25, Y+19	; 0x13
     e48:	cc 01       	movw	r24, r24
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	29 85       	ldd	r18, Y+9	; 0x09
     e60:	3a 85       	ldd	r19, Y+10	; 0x0a
     e62:	4b 85       	ldd	r20, Y+11	; 0x0b
     e64:	5c 85       	ldd	r21, Y+12	; 0x0c
     e66:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__ltsf2>
     e6a:	88 23       	and	r24, r24
     e6c:	54 f5       	brge	.+84     	; 0xec2 <TIMER_delay+0xd8>
		local_u16TimeInitial = (local_doubleTimeMaxDelay-copy_u16millisec)/local_doubleTimetick;
     e6e:	8a 89       	ldd	r24, Y+18	; 0x12
     e70:	9b 89       	ldd	r25, Y+19	; 0x13
     e72:	cc 01       	movw	r24, r24
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	69 85       	ldd	r22, Y+9	; 0x09
     e86:	7a 85       	ldd	r23, Y+10	; 0x0a
     e88:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e8c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	2d 81       	ldd	r18, Y+5	; 0x05
     e9a:	3e 81       	ldd	r19, Y+6	; 0x06
     e9c:	4f 81       	ldd	r20, Y+7	; 0x07
     e9e:	58 85       	ldd	r21, Y+8	; 0x08
     ea0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9e 87       	std	Y+14, r25	; 0x0e
     eb6:	8d 87       	std	Y+13, r24	; 0x0d
		local_u16Num_ov = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	98 8b       	std	Y+16, r25	; 0x10
     ebe:	8f 87       	std	Y+15, r24	; 0x0f
     ec0:	72 c0       	rjmp	.+228    	; 0xfa6 <TIMER_delay+0x1bc>

	}else if(copy_u16millisec == (int)local_doubleTimeMaxDelay){
     ec2:	69 85       	ldd	r22, Y+9	; 0x09
     ec4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eca:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9c 01       	movw	r18, r24
     ed4:	8a 89       	ldd	r24, Y+18	; 0x12
     ed6:	9b 89       	ldd	r25, Y+19	; 0x13
     ed8:	28 17       	cp	r18, r24
     eda:	39 07       	cpc	r19, r25
     edc:	39 f4       	brne	.+14     	; 0xeec <TIMER_delay+0x102>
		local_u16TimeInitial=0;
     ede:	1e 86       	std	Y+14, r1	; 0x0e
     ee0:	1d 86       	std	Y+13, r1	; 0x0d
		local_u16Num_ov=1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	98 8b       	std	Y+16, r25	; 0x10
     ee8:	8f 87       	std	Y+15, r24	; 0x0f
     eea:	5d c0       	rjmp	.+186    	; 0xfa6 <TIMER_delay+0x1bc>
	}else{
		local_u16Num_ov = ceil((double)copy_u16millisec/local_doubleTimeMaxDelay);
     eec:	8a 89       	ldd	r24, Y+18	; 0x12
     eee:	9b 89       	ldd	r25, Y+19	; 0x13
     ef0:	cc 01       	movw	r24, r24
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	29 85       	ldd	r18, Y+9	; 0x09
     f08:	3a 85       	ldd	r19, Y+10	; 0x0a
     f0a:	4b 85       	ldd	r20, Y+11	; 0x0b
     f0c:	5c 85       	ldd	r21, Y+12	; 0x0c
     f0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <ceil>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	98 8b       	std	Y+16, r25	; 0x10
     f30:	8f 87       	std	Y+15, r24	; 0x0f
		local_u16TimeInitial= (1<<8) - ((double)copy_u16millisec/local_doubleTimetick)/local_u16Num_ov;
     f32:	8a 89       	ldd	r24, Y+18	; 0x12
     f34:	9b 89       	ldd	r25, Y+19	; 0x13
     f36:	cc 01       	movw	r24, r24
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	2d 81       	ldd	r18, Y+5	; 0x05
     f4e:	3e 81       	ldd	r19, Y+6	; 0x06
     f50:	4f 81       	ldd	r20, Y+7	; 0x07
     f52:	58 85       	ldd	r21, Y+8	; 0x08
     f54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	7c 01       	movw	r14, r24
     f5e:	8d 01       	movw	r16, r26
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	98 89       	ldd	r25, Y+16	; 0x10
     f64:	cc 01       	movw	r24, r24
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f72:	9b 01       	movw	r18, r22
     f74:	ac 01       	movw	r20, r24
     f76:	c8 01       	movw	r24, r16
     f78:	b7 01       	movw	r22, r14
     f7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9c 01       	movw	r18, r24
     f84:	ad 01       	movw	r20, r26
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	93 e4       	ldi	r25, 0x43	; 67
     f8e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9e 87       	std	Y+14, r25	; 0x0e
     fa4:	8d 87       	std	Y+13, r24	; 0x0d

	}
	TCNT0 = local_u16TimeInitial;
     fa6:	e2 e5       	ldi	r30, 0x52	; 82
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	8d 85       	ldd	r24, Y+13	; 0x0d
     fac:	80 83       	st	Z, r24
	TCCR0 |= (1<<2);
     fae:	a3 e5       	ldi	r26, 0x53	; 83
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	84 60       	ori	r24, 0x04	; 4
     fba:	8c 93       	st	X, r24
     fbc:	1b c0       	rjmp	.+54     	; 0xff4 <TIMER_delay+0x20a>

	while(local_u32OverFlowCounnt<local_u16Num_ov){

		while(((TIFR>>0)&1)==0);
     fbe:	e8 e5       	ldi	r30, 0x58	; 88
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	b9 f3       	breq	.-18     	; 0xfbe <TIMER_delay+0x1d4>

		TIFR|=(1<<0);
     fd0:	a8 e5       	ldi	r26, 0x58	; 88
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e5       	ldi	r30, 0x58	; 88
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	8c 93       	st	X, r24

		local_u32OverFlowCounnt++;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	ab 81       	ldd	r26, Y+3	; 0x03
     fe4:	bc 81       	ldd	r27, Y+4	; 0x04
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	a1 1d       	adc	r26, r1
     fea:	b1 1d       	adc	r27, r1
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	ab 83       	std	Y+3, r26	; 0x03
     ff2:	bc 83       	std	Y+4, r27	; 0x04

	}
	TCNT0 = local_u16TimeInitial;
	TCCR0 |= (1<<2);

	while(local_u32OverFlowCounnt<local_u16Num_ov){
     ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff6:	98 89       	ldd	r25, Y+16	; 0x10
     ff8:	9c 01       	movw	r18, r24
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	ab 81       	ldd	r26, Y+3	; 0x03
    1004:	bc 81       	ldd	r27, Y+4	; 0x04
    1006:	82 17       	cp	r24, r18
    1008:	93 07       	cpc	r25, r19
    100a:	a4 07       	cpc	r26, r20
    100c:	b5 07       	cpc	r27, r21
    100e:	b8 f2       	brcs	.-82     	; 0xfbe <TIMER_delay+0x1d4>
		TIFR|=(1<<0);

		local_u32OverFlowCounnt++;
	}

	TCCR0 = 0x00;
    1010:	e3 e5       	ldi	r30, 0x53	; 83
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	10 82       	st	Z, r1
	return local_enuerrorState;
    1016:	89 89       	ldd	r24, Y+17	; 0x11
}
    1018:	63 96       	adiw	r28, 0x13	; 19
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <GIE_vidEnable>:

/*
 * fire global interrupt
 */
void GIE_vidEnable(void)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    103a:	af e5       	ldi	r26, 0x5F	; 95
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ef e5       	ldi	r30, 0x5F	; 95
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	8c 93       	st	X, r24
	//asm("SEI");
}
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <GIE_vidDisable>:
/*
 * close global interrupt
 */
void GIE_vidDisable(void)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	SREG&=~(1<<7);
    1056:	af e5       	ldi	r26, 0x5F	; 95
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ef e5       	ldi	r30, 0x5F	; 95
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 77       	andi	r24, 0x7F	; 127
    1062:	8c 93       	st	X, r24
	//asm("CLI");
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <EXTI_enuInit>:

/*
 * this function initialize the external interrupt with different modes
 */
ES_t EXTI_enuInit(void)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    1074:	19 82       	std	Y+1, r1	; 0x01

#if EXTI0_INT_MODE == EVENT_TRIGGERED
	GICR |= (1<<6);
    1076:	ab e5       	ldi	r26, 0x5B	; 91
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	eb e5       	ldi	r30, 0x5B	; 91
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 64       	ori	r24, 0x40	; 64
    1082:	8c 93       	st	X, r24
	GICR &=~(1<<6);
#else
#error exti0 configuration is wrong
#endif

	MCUCR &=~(3<<0);
    1084:	a5 e5       	ldi	r26, 0x55	; 85
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e5       	ldi	r30, 0x55	; 85
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8c 7f       	andi	r24, 0xFC	; 252
    1090:	8c 93       	st	X, r24
#if EXTI0_SENSE_LEVEL == LOW_LEVEL

#elif EXTI0_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<0);
#elif EXTI0_SENSE_LEVEL == FALLING
	MCUCR |= (2<<0);
    1092:	a5 e5       	ldi	r26, 0x55	; 85
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e5       	ldi	r30, 0x55	; 85
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8c 93       	st	X, r24
	MCUCR |= (3<<0);
#else
#error sense level of exti 0 is wrong
#endif

	return Local_enuErrorState;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <EXTI_enuSetSenseLevel>:
/*
 * this function set different modes that interrupt to work on it
 */
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8IntPinNum , u8 Copy_u8SenseLevel)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <EXTI_enuSetSenseLevel+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <EXTI_enuSetSenseLevel+0x8>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    10bc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntPinNum == INT0)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	88 23       	and	r24, r24
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <EXTI_enuSetSenseLevel+0x1c>
    10c4:	42 c0       	rjmp	.+132    	; 0x114a <EXTI_enuSetSenseLevel+0xa0>
	{
		MCUCR &=~(3<<0);
    10c6:	a5 e5       	ldi	r26, 0x55	; 85
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e5       	ldi	r30, 0x55	; 85
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8c 7f       	andi	r24, 0xFC	; 252
    10d2:	8c 93       	st	X, r24
		switch(Copy_u8SenseLevel)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3d 83       	std	Y+5, r19	; 0x05
    10dc:	2c 83       	std	Y+4, r18	; 0x04
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	82 32       	cpi	r24, 0x22	; 34
    10e4:	91 05       	cpc	r25, r1
    10e6:	b1 f0       	breq	.+44     	; 0x1114 <EXTI_enuSetSenseLevel+0x6a>
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	23 32       	cpi	r18, 0x23	; 35
    10ee:	31 05       	cpc	r19, r1
    10f0:	5c f4       	brge	.+22     	; 0x1108 <EXTI_enuSetSenseLevel+0x5e>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	8a 30       	cpi	r24, 0x0A	; 10
    10f8:	91 05       	cpc	r25, r1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <EXTI_enuSetSenseLevel+0x7a>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	20 32       	cpi	r18, 0x20	; 32
    1102:	31 05       	cpc	r19, r1
    1104:	51 f1       	breq	.+84     	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
    1106:	1e c0       	rjmp	.+60     	; 0x1144 <EXTI_enuSetSenseLevel+0x9a>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	89 34       	cpi	r24, 0x49	; 73
    110e:	91 05       	cpc	r25, r1
    1110:	89 f0       	breq	.+34     	; 0x1134 <EXTI_enuSetSenseLevel+0x8a>
    1112:	18 c0       	rjmp	.+48     	; 0x1144 <EXTI_enuSetSenseLevel+0x9a>
		{
		case LOW_LEVEL:

			break;
		case ANY_CHANGE:
			MCUCR |= (1<<0);
    1114:	a5 e5       	ldi	r26, 0x55	; 85
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e5       	ldi	r30, 0x55	; 85
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	81 60       	ori	r24, 0x01	; 1
    1120:	8c 93       	st	X, r24
    1122:	1b c0       	rjmp	.+54     	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
			break;
		case FALLING:
			MCUCR |= (2<<0);
    1124:	a5 e5       	ldi	r26, 0x55	; 85
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e5       	ldi	r30, 0x55	; 85
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	8c 93       	st	X, r24
    1132:	13 c0       	rjmp	.+38     	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
			break;
		case RISING:
			MCUCR |= (3<<0);
    1134:	a5 e5       	ldi	r26, 0x55	; 85
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e5       	ldi	r30, 0x55	; 85
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	83 60       	ori	r24, 0x03	; 3
    1140:	8c 93       	st	X, r24
    1142:	0b c0       	rjmp	.+22     	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	08 c0       	rjmp	.+16     	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
		}
	}
	else if(Copy_u8IntPinNum == INT1)
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	29 f0       	breq	.+10     	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
	{

	}
	else if(Copy_u8IntPinNum == INT2)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	11 f0       	breq	.+4      	; 0x115a <EXTI_enuSetSenseLevel+0xb0>
	{

	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <EXTI_enuEnableInterrupt>:
/*
 * function to enable interrupt
 */
ES_t EXTI_enuEnableInterrupt(u8 Copy_u8IntPinNum)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <EXTI_enuEnableInterrupt+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    1178:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntPinNum == INT0)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 23       	and	r24, r24
    117e:	41 f4       	brne	.+16     	; 0x1190 <EXTI_enuEnableInterrupt+0x24>
	{
		GICR |= (1<<6);
    1180:	ab e5       	ldi	r26, 0x5B	; 91
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e5       	ldi	r30, 0x5B	; 91
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 64       	ori	r24, 0x40	; 64
    118c:	8c 93       	st	X, r24
    118e:	18 c0       	rjmp	.+48     	; 0x11c0 <EXTI_enuEnableInterrupt+0x54>
	}
	else if(Copy_u8IntPinNum == INT1)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	41 f4       	brne	.+16     	; 0x11a6 <EXTI_enuEnableInterrupt+0x3a>
	{
		GICR |= (1<<7);
    1196:	ab e5       	ldi	r26, 0x5B	; 91
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	eb e5       	ldi	r30, 0x5B	; 91
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	8c 93       	st	X, r24
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <EXTI_enuEnableInterrupt+0x54>
	}
	else if(Copy_u8IntPinNum == INT2)
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	41 f4       	brne	.+16     	; 0x11bc <EXTI_enuEnableInterrupt+0x50>
	{
		GICR |= (1<<5);
    11ac:	ab e5       	ldi	r26, 0x5B	; 91
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	eb e5       	ldi	r30, 0x5B	; 91
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 62       	ori	r24, 0x20	; 32
    11b8:	8c 93       	st	X, r24
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <EXTI_enuEnableInterrupt+0x54>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <EXTI_enuDisableInterrupt>:
/*
 * function disable  interrupt
 */
ES_t EXTI_enuDisableInterrupt(u8 Copy_u8IntPinNum)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EXTI_enuDisableInterrupt+0x6>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    11d8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntPinNum == INT0)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 23       	and	r24, r24
    11de:	41 f4       	brne	.+16     	; 0x11f0 <EXTI_enuDisableInterrupt+0x24>
	{
		GICR &=~ (1<<6);
    11e0:	ab e5       	ldi	r26, 0x5B	; 91
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e5       	ldi	r30, 0x5B	; 91
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8f 7b       	andi	r24, 0xBF	; 191
    11ec:	8c 93       	st	X, r24
    11ee:	18 c0       	rjmp	.+48     	; 0x1220 <EXTI_enuDisableInterrupt+0x54>
	}
	else if(Copy_u8IntPinNum == INT1)
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	41 f4       	brne	.+16     	; 0x1206 <EXTI_enuDisableInterrupt+0x3a>
	{
		GICR &=~  (1<<7);
    11f6:	ab e5       	ldi	r26, 0x5B	; 91
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e5       	ldi	r30, 0x5B	; 91
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8f 77       	andi	r24, 0x7F	; 127
    1202:	8c 93       	st	X, r24
    1204:	0d c0       	rjmp	.+26     	; 0x1220 <EXTI_enuDisableInterrupt+0x54>
	}
	else if(Copy_u8IntPinNum == INT2)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	41 f4       	brne	.+16     	; 0x121c <EXTI_enuDisableInterrupt+0x50>
	{
		GICR &=~  (1<<5);
    120c:	ab e5       	ldi	r26, 0x5B	; 91
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	eb e5       	ldi	r30, 0x5B	; 91
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 7d       	andi	r24, 0xDF	; 223
    1218:	8c 93       	st	X, r24
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <EXTI_enuDisableInterrupt+0x54>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <EXTI_enuCallBack>:
/*
 * function to store fun i want to do when fire interrupt
 */
ES_t EXTI_enuCallBack(void(*Copy_pFunAppFun)(void) , u8 Copy_u8IntPinNum)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <EXTI_enuCallBack+0x6>
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pFunAppFun != NULL)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	49 f0       	breq	.+18     	; 0x1258 <EXTI_enuCallBack+0x2c>
	{
		if (Copy_u8IntPinNum == INT0)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	88 23       	and	r24, r24
    124a:	31 f4       	brne	.+12     	; 0x1258 <EXTI_enuCallBack+0x2c>
		{
			EXTI_pFunISR0Fun = Copy_pFunAppFun;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	90 93 6b 01 	sts	0x016B, r25
    1254:	80 93 6a 01 	sts	0x016A, r24
		}
	}
	return ES_OK;
    1258:	80 e0       	ldi	r24, 0x00	; 0
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <__vector_1>:
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

//int0
void __vector_1 (void)
{
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	2f 93       	push	r18
    1272:	3f 93       	push	r19
    1274:	4f 93       	push	r20
    1276:	5f 93       	push	r21
    1278:	6f 93       	push	r22
    127a:	7f 93       	push	r23
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
    1284:	ef 93       	push	r30
    1286:	ff 93       	push	r31
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pFunISR0Fun != NULL)
    1290:	80 91 6a 01 	lds	r24, 0x016A
    1294:	90 91 6b 01 	lds	r25, 0x016B
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	29 f0       	breq	.+10     	; 0x12a6 <__vector_1+0x40>
	{
		EXTI_pFunISR0Fun ();
    129c:	e0 91 6a 01 	lds	r30, 0x016A
    12a0:	f0 91 6b 01 	lds	r31, 0x016B
    12a4:	09 95       	icall
	}
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <__vector_2>:

//int1
void __vector_2 (void)
{
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62

}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_3>:

//int2
void __vector_3 (void)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62

}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <DIO_enuSetPinDirection>:
 * function use :
 * this function set the direcation of pin as input or output
 */

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_enuSetPinDirection+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <DIO_enuSetPinDirection+0x8>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <DIO_enuSetPinDirection+0xa>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	6b 83       	std	Y+3, r22	; 0x03
    131e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_OK;
    1320:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	08 f0       	brcs	.+2      	; 0x132a <DIO_enuSetPinDirection+0x1e>
    1328:	d0 c0       	rjmp	.+416    	; 0x14ca <DIO_enuSetPinDirection+0x1be>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	08 f0       	brcs	.+2      	; 0x1332 <DIO_enuSetPinDirection+0x26>
    1330:	cc c0       	rjmp	.+408    	; 0x14ca <DIO_enuSetPinDirection+0x1be>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	08 f0       	brcs	.+2      	; 0x133a <DIO_enuSetPinDirection+0x2e>
    1338:	c8 c0       	rjmp	.+400    	; 0x14ca <DIO_enuSetPinDirection+0x1be>
			Copy_u8PinID <=  DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch(Copy_u8GroupID)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3e 83       	std	Y+6, r19	; 0x06
    1342:	2d 83       	std	Y+5, r18	; 0x05
    1344:	6d 81       	ldd	r22, Y+5	; 0x05
    1346:	7e 81       	ldd	r23, Y+6	; 0x06
    1348:	61 30       	cpi	r22, 0x01	; 1
    134a:	71 05       	cpc	r23, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <DIO_enuSetPinDirection+0x44>
    134e:	41 c0       	rjmp	.+130    	; 0x13d2 <DIO_enuSetPinDirection+0xc6>
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	91 05       	cpc	r25, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <DIO_enuSetPinDirection+0x5a>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	71 f0       	breq	.+28     	; 0x1380 <DIO_enuSetPinDirection+0x74>
    1364:	b0 c0       	rjmp	.+352    	; 0x14c6 <DIO_enuSetPinDirection+0x1ba>
    1366:	6d 81       	ldd	r22, Y+5	; 0x05
    1368:	7e 81       	ldd	r23, Y+6	; 0x06
    136a:	62 30       	cpi	r22, 0x02	; 2
    136c:	71 05       	cpc	r23, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <DIO_enuSetPinDirection+0x66>
    1370:	59 c0       	rjmp	.+178    	; 0x1424 <DIO_enuSetPinDirection+0x118>
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <DIO_enuSetPinDirection+0x72>
    137c:	7c c0       	rjmp	.+248    	; 0x1476 <DIO_enuSetPinDirection+0x16a>
    137e:	a3 c0       	rjmp	.+326    	; 0x14c6 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:
			DDRA &=~ (DIO_u8BIT_MASK   << Copy_u8PinID);
    1380:	aa e3       	ldi	r26, 0x3A	; 58
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_enuSetPinDirection+0x90>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	2a 95       	dec	r18
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_enuSetPinDirection+0x8c>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction << Copy_u8PinID);
    13a6:	aa e3       	ldi	r26, 0x3A	; 58
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ea e3       	ldi	r30, 0x3A	; 58
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	b9 01       	movw	r22, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_enuSetPinDirection+0xba>
    13c2:	66 0f       	add	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_enuSetPinDirection+0xb6>
    13ca:	cb 01       	movw	r24, r22
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	7a c0       	rjmp	.+244    	; 0x14c6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~ (DIO_u8BIT_MASK   << Copy_u8PinID);
    13d2:	a7 e3       	ldi	r26, 0x37	; 55
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e7 e3       	ldi	r30, 0x37	; 55
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_enuSetPinDirection+0xe2>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	2a 95       	dec	r18
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_enuSetPinDirection+0xde>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction << Copy_u8PinID);
    13f8:	a7 e3       	ldi	r26, 0x37	; 55
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e7 e3       	ldi	r30, 0x37	; 55
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	b9 01       	movw	r22, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_enuSetPinDirection+0x10c>
    1414:	66 0f       	add	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_enuSetPinDirection+0x108>
    141c:	cb 01       	movw	r24, r22
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	51 c0       	rjmp	.+162    	; 0x14c6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~ (DIO_u8BIT_MASK   << Copy_u8PinID);
    1424:	a4 e3       	ldi	r26, 0x34	; 52
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e4 e3       	ldi	r30, 0x34	; 52
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_enuSetPinDirection+0x134>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	2a 95       	dec	r18
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_enuSetPinDirection+0x130>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction << Copy_u8PinID);
    144a:	a4 e3       	ldi	r26, 0x34	; 52
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e4 e3       	ldi	r30, 0x34	; 52
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	b9 01       	movw	r22, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_enuSetPinDirection+0x15e>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_enuSetPinDirection+0x15a>
    146e:	cb 01       	movw	r24, r22
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	28 c0       	rjmp	.+80     	; 0x14c6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~ (DIO_u8BIT_MASK   << Copy_u8PinID);
    1476:	a1 e3       	ldi	r26, 0x31	; 49
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e1 e3       	ldi	r30, 0x31	; 49
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_enuSetPinDirection+0x186>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	2a 95       	dec	r18
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_enuSetPinDirection+0x182>
    1496:	80 95       	com	r24
    1498:	84 23       	and	r24, r20
    149a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction << Copy_u8PinID);
    149c:	a1 e3       	ldi	r26, 0x31	; 49
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e1 e3       	ldi	r30, 0x31	; 49
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	b9 01       	movw	r22, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_enuSetPinDirection+0x1b0>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_enuSetPinDirection+0x1ac>
    14c0:	cb 01       	movw	r24, r22
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    14c6:	19 82       	std	Y+1, r1	; 0x01
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_enuSetPinDirection+0x1c2>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	26 96       	adiw	r28, 0x06	; 6
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <DIO_enuSetPinValue>:
/*******
 * this function set the pin high or low
 * float or pulledup
 */
ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_enuSetPinValue+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_enuSetPinValue+0x8>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_enuSetPinValue+0xa>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8a 83       	std	Y+2, r24	; 0x02
    14f2:	6b 83       	std	Y+3, r22	; 0x03
    14f4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_OK;
    14f6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <DIO_enuSetPinValue+0x1e>
    14fe:	02 c1       	rjmp	.+516    	; 0x1704 <DIO_enuSetPinValue+0x222>
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	08 f0       	brcs	.+2      	; 0x1508 <DIO_enuSetPinValue+0x26>
    1506:	fe c0       	rjmp	.+508    	; 0x1704 <DIO_enuSetPinValue+0x222>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	08 f0       	brcs	.+2      	; 0x1510 <DIO_enuSetPinValue+0x2e>
    150e:	fa c0       	rjmp	.+500    	; 0x1704 <DIO_enuSetPinValue+0x222>
			Copy_u8PinID <=  DIO_u8PIN7 &&
			Copy_u8Value <= DIO_u8HIGH)
	{
		switch(Copy_u8GroupID)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3e 83       	std	Y+6, r19	; 0x06
    1518:	2d 83       	std	Y+5, r18	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <DIO_enuSetPinValue+0x44>
    1524:	4d c0       	rjmp	.+154    	; 0x15c0 <DIO_enuSetPinValue+0xde>
    1526:	2d 81       	ldd	r18, Y+5	; 0x05
    1528:	3e 81       	ldd	r19, Y+6	; 0x06
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	2c f4       	brge	.+10     	; 0x153a <DIO_enuSetPinValue+0x58>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	71 f0       	breq	.+28     	; 0x1554 <DIO_enuSetPinValue+0x72>
    1538:	e3 c0       	rjmp	.+454    	; 0x1700 <DIO_enuSetPinValue+0x21e>
    153a:	2d 81       	ldd	r18, Y+5	; 0x05
    153c:	3e 81       	ldd	r19, Y+6	; 0x06
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <DIO_enuSetPinValue+0x64>
    1544:	73 c0       	rjmp	.+230    	; 0x162c <DIO_enuSetPinValue+0x14a>
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <DIO_enuSetPinValue+0x70>
    1550:	a3 c0       	rjmp	.+326    	; 0x1698 <DIO_enuSetPinValue+0x1b6>
    1552:	d6 c0       	rjmp	.+428    	; 0x1700 <DIO_enuSetPinValue+0x21e>
		{
		case DIO_u8GROUP_A:
			if (Copy_u8Value == DIO_u8HIGH ||
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	19 f0       	breq	.+6      	; 0x1560 <DIO_enuSetPinValue+0x7e>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	a1 f4       	brne	.+40     	; 0x1588 <DIO_enuSetPinValue+0xa6>
					Copy_u8Value == DIO_u8PULL_UP)
				PORTA |= (DIO_u8BIT_MASK << Copy_u8PinID);
    1560:	ab e3       	ldi	r26, 0x3B	; 59
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_enuSetPinValue+0x9c>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <DIO_enuSetPinValue+0x98>
    1582:	84 2b       	or	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	bc c0       	rjmp	.+376    	; 0x1700 <DIO_enuSetPinValue+0x21e>

			else if (Copy_u8Value == DIO_u8LOW ||
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	88 23       	and	r24, r24
    158c:	21 f0       	breq	.+8      	; 0x1596 <DIO_enuSetPinValue+0xb4>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	88 23       	and	r24, r24
    1592:	09 f0       	breq	.+2      	; 0x1596 <DIO_enuSetPinValue+0xb4>
    1594:	b5 c0       	rjmp	.+362    	; 0x1700 <DIO_enuSetPinValue+0x21e>
					Copy_u8Value == DIO_u8FLOAT)
				PORTA &=~ (DIO_u8BIT_MASK << Copy_u8PinID);
    1596:	ab e3       	ldi	r26, 0x3B	; 59
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	eb e3       	ldi	r30, 0x3B	; 59
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_enuSetPinValue+0xd2>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_enuSetPinValue+0xce>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	a0 c0       	rjmp	.+320    	; 0x1700 <DIO_enuSetPinValue+0x21e>

			break;
		case DIO_u8GROUP_B:
			if (Copy_u8Value == DIO_u8HIGH ||
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	19 f0       	breq	.+6      	; 0x15cc <DIO_enuSetPinValue+0xea>
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <DIO_enuSetPinValue+0x112>
					Copy_u8Value == DIO_u8PULL_UP)
				PORTB |= (DIO_u8BIT_MASK << Copy_u8PinID);
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_enuSetPinValue+0x108>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_enuSetPinValue+0x104>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	86 c0       	rjmp	.+268    	; 0x1700 <DIO_enuSetPinValue+0x21e>

			else if (Copy_u8Value == DIO_u8LOW ||
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	88 23       	and	r24, r24
    15f8:	21 f0       	breq	.+8      	; 0x1602 <DIO_enuSetPinValue+0x120>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	88 23       	and	r24, r24
    15fe:	09 f0       	breq	.+2      	; 0x1602 <DIO_enuSetPinValue+0x120>
    1600:	7f c0       	rjmp	.+254    	; 0x1700 <DIO_enuSetPinValue+0x21e>
					Copy_u8Value == DIO_u8FLOAT)
				PORTB &=~ (DIO_u8BIT_MASK << Copy_u8PinID);
    1602:	a8 e3       	ldi	r26, 0x38	; 56
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 e3       	ldi	r30, 0x38	; 56
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_enuSetPinValue+0x13e>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_enuSetPinValue+0x13a>
    1624:	80 95       	com	r24
    1626:	84 23       	and	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	6a c0       	rjmp	.+212    	; 0x1700 <DIO_enuSetPinValue+0x21e>
			break;
		case DIO_u8GROUP_C:
			if (Copy_u8Value == DIO_u8HIGH ||
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	19 f0       	breq	.+6      	; 0x1638 <DIO_enuSetPinValue+0x156>
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	a1 f4       	brne	.+40     	; 0x1660 <DIO_enuSetPinValue+0x17e>
					Copy_u8Value == DIO_u8PULL_UP)
				PORTC |= (DIO_u8BIT_MASK << Copy_u8PinID);
    1638:	a5 e3       	ldi	r26, 0x35	; 53
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_enuSetPinValue+0x174>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_enuSetPinValue+0x170>
    165a:	84 2b       	or	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	50 c0       	rjmp	.+160    	; 0x1700 <DIO_enuSetPinValue+0x21e>

			else if (Copy_u8Value == DIO_u8LOW ||
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	88 23       	and	r24, r24
    1664:	21 f0       	breq	.+8      	; 0x166e <DIO_enuSetPinValue+0x18c>
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	88 23       	and	r24, r24
    166a:	09 f0       	breq	.+2      	; 0x166e <DIO_enuSetPinValue+0x18c>
    166c:	49 c0       	rjmp	.+146    	; 0x1700 <DIO_enuSetPinValue+0x21e>
					Copy_u8Value == DIO_u8FLOAT)
				PORTC &=~ (DIO_u8BIT_MASK << Copy_u8PinID);
    166e:	a5 e3       	ldi	r26, 0x35	; 53
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e3       	ldi	r30, 0x35	; 53
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_enuSetPinValue+0x1aa>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_enuSetPinValue+0x1a6>
    1690:	80 95       	com	r24
    1692:	84 23       	and	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	34 c0       	rjmp	.+104    	; 0x1700 <DIO_enuSetPinValue+0x21e>
			break;
		case DIO_u8GROUP_D:
			if (Copy_u8Value == DIO_u8HIGH ||
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	19 f0       	breq	.+6      	; 0x16a4 <DIO_enuSetPinValue+0x1c2>
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <DIO_enuSetPinValue+0x1ea>
					Copy_u8Value == DIO_u8PULL_UP)
				PORTD |= (DIO_u8BIT_MASK << Copy_u8PinID);
    16a4:	a2 e3       	ldi	r26, 0x32	; 50
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e2 e3       	ldi	r30, 0x32	; 50
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_enuSetPinValue+0x1e0>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_enuSetPinValue+0x1dc>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	1a c0       	rjmp	.+52     	; 0x1700 <DIO_enuSetPinValue+0x21e>

			else if (Copy_u8Value == DIO_u8LOW ||
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	88 23       	and	r24, r24
    16d0:	19 f0       	breq	.+6      	; 0x16d8 <DIO_enuSetPinValue+0x1f6>
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	88 23       	and	r24, r24
    16d6:	a1 f4       	brne	.+40     	; 0x1700 <DIO_enuSetPinValue+0x21e>
					Copy_u8Value == DIO_u8FLOAT)
				PORTD &=~ (DIO_u8BIT_MASK << Copy_u8PinID);
    16d8:	a2 e3       	ldi	r26, 0x32	; 50
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enuSetPinValue+0x214>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_enuSetPinValue+0x210>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_enuSetPinValue+0x226>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
}
    170a:	26 96       	adiw	r28, 0x06	; 6
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <DIO_enuTogglePinValue>:
/*
 * this function toggle the pin
 */
ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <DIO_enuTogglePinValue+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <DIO_enuTogglePinValue+0x8>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	08 f0       	brcs	.+2      	; 0x173a <DIO_enuTogglePinValue+0x1e>
    1738:	74 c0       	rjmp	.+232    	; 0x1822 <DIO_enuTogglePinValue+0x106>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	88 30       	cpi	r24, 0x08	; 8
    173e:	08 f0       	brcs	.+2      	; 0x1742 <DIO_enuTogglePinValue+0x26>
    1740:	70 c0       	rjmp	.+224    	; 0x1822 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <=  DIO_u8PIN7)
	{
		switch(Copy_u8GroupID)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3d 83       	std	Y+5, r19	; 0x05
    174a:	2c 83       	std	Y+4, r18	; 0x04
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	91 05       	cpc	r25, r1
    1754:	49 f1       	breq	.+82     	; 0x17a8 <DIO_enuTogglePinValue+0x8c>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	2c f4       	brge	.+10     	; 0x176a <DIO_enuTogglePinValue+0x4e>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 f0       	breq	.+24     	; 0x1780 <DIO_enuTogglePinValue+0x64>
    1768:	5a c0       	rjmp	.+180    	; 0x181e <DIO_enuTogglePinValue+0x102>
    176a:	2c 81       	ldd	r18, Y+4	; 0x04
    176c:	3d 81       	ldd	r19, Y+5	; 0x05
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	71 f1       	breq	.+92     	; 0x17d0 <DIO_enuTogglePinValue+0xb4>
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	91 05       	cpc	r25, r1
    177c:	e9 f1       	breq	.+122    	; 0x17f8 <DIO_enuTogglePinValue+0xdc>
    177e:	4f c0       	rjmp	.+158    	; 0x181e <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_enuTogglePinValue+0x82>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_enuTogglePinValue+0x7e>
    17a2:	84 27       	eor	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	3b c0       	rjmp	.+118    	; 0x181e <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    17a8:	a8 e3       	ldi	r26, 0x38	; 56
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_enuTogglePinValue+0xaa>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_enuTogglePinValue+0xa6>
    17ca:	84 27       	eor	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	27 c0       	rjmp	.+78     	; 0x181e <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    17d0:	a5 e3       	ldi	r26, 0x35	; 53
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e3       	ldi	r30, 0x35	; 53
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_enuTogglePinValue+0xd2>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_enuTogglePinValue+0xce>
    17f2:	84 27       	eor	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^= (DIO_u8BIT_MASK << Copy_u8PinID);
    17f8:	a2 e3       	ldi	r26, 0x32	; 50
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e2 e3       	ldi	r30, 0x32	; 50
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_enuTogglePinValue+0xfa>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <DIO_enuTogglePinValue+0xf6>
    181a:	84 27       	eor	r24, r20
    181c:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <DIO_enuGetPinValue>:
/*
 * this function get the value in pin
 * return this value in pointer
 */
ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	27 97       	sbiw	r28, 0x07	; 7
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	6b 83       	std	Y+3, r22	; 0x03
    1850:	5d 83       	std	Y+5, r21	; 0x05
    1852:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_OK;
    1854:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <DIO_enuGetPinValue+0x28>
    185e:	7d c0       	rjmp	.+250    	; 0x195a <DIO_enuGetPinValue+0x122>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	08 f0       	brcs	.+2      	; 0x1868 <DIO_enuGetPinValue+0x30>
    1866:	76 c0       	rjmp	.+236    	; 0x1954 <DIO_enuGetPinValue+0x11c>
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <DIO_enuGetPinValue+0x38>
    186e:	72 c0       	rjmp	.+228    	; 0x1954 <DIO_enuGetPinValue+0x11c>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch(Copy_u8GroupID)
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3f 83       	std	Y+7, r19	; 0x07
    1878:	2e 83       	std	Y+6, r18	; 0x06
    187a:	4e 81       	ldd	r20, Y+6	; 0x06
    187c:	5f 81       	ldd	r21, Y+7	; 0x07
    187e:	41 30       	cpi	r20, 0x01	; 1
    1880:	51 05       	cpc	r21, r1
    1882:	59 f1       	breq	.+86     	; 0x18da <DIO_enuGetPinValue+0xa2>
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	91 05       	cpc	r25, r1
    188c:	34 f4       	brge	.+12     	; 0x189a <DIO_enuGetPinValue+0x62>
    188e:	2e 81       	ldd	r18, Y+6	; 0x06
    1890:	3f 81       	ldd	r19, Y+7	; 0x07
    1892:	21 15       	cp	r18, r1
    1894:	31 05       	cpc	r19, r1
    1896:	69 f0       	breq	.+26     	; 0x18b2 <DIO_enuGetPinValue+0x7a>
    1898:	5b c0       	rjmp	.+182    	; 0x1950 <DIO_enuGetPinValue+0x118>
    189a:	4e 81       	ldd	r20, Y+6	; 0x06
    189c:	5f 81       	ldd	r21, Y+7	; 0x07
    189e:	42 30       	cpi	r20, 0x02	; 2
    18a0:	51 05       	cpc	r21, r1
    18a2:	79 f1       	breq	.+94     	; 0x1902 <DIO_enuGetPinValue+0xca>
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	9f 81       	ldd	r25, Y+7	; 0x07
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <DIO_enuGetPinValue+0x78>
    18ae:	3d c0       	rjmp	.+122    	; 0x192a <DIO_enuGetPinValue+0xf2>
    18b0:	4f c0       	rjmp	.+158    	; 0x1950 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID ) & DIO_u8BIT_MASK);
    18b2:	e9 e3       	ldi	r30, 0x39	; 57
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_enuGetPinValue+0x92>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_enuGetPinValue+0x8e>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	ec 81       	ldd	r30, Y+4	; 0x04
    18d4:	fd 81       	ldd	r31, Y+5	; 0x05
    18d6:	80 83       	st	Z, r24
    18d8:	3b c0       	rjmp	.+118    	; 0x1950 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID ) & DIO_u8BIT_MASK);
    18da:	e6 e3       	ldi	r30, 0x36	; 54
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a9 01       	movw	r20, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <DIO_enuGetPinValue+0xba>
    18ee:	55 95       	asr	r21
    18f0:	47 95       	ror	r20
    18f2:	8a 95       	dec	r24
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <DIO_enuGetPinValue+0xb6>
    18f6:	ca 01       	movw	r24, r20
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	ec 81       	ldd	r30, Y+4	; 0x04
    18fc:	fd 81       	ldd	r31, Y+5	; 0x05
    18fe:	80 83       	st	Z, r24
    1900:	27 c0       	rjmp	.+78     	; 0x1950 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID ) & DIO_u8BIT_MASK);
    1902:	e3 e3       	ldi	r30, 0x33	; 51
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_enuGetPinValue+0xe2>
    1916:	55 95       	asr	r21
    1918:	47 95       	ror	r20
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_enuGetPinValue+0xde>
    191e:	ca 01       	movw	r24, r20
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	ec 81       	ldd	r30, Y+4	; 0x04
    1924:	fd 81       	ldd	r31, Y+5	; 0x05
    1926:	80 83       	st	Z, r24
    1928:	13 c0       	rjmp	.+38     	; 0x1950 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID ) & DIO_u8BIT_MASK);
    192a:	e0 e3       	ldi	r30, 0x30	; 48
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a9 01       	movw	r20, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_enuGetPinValue+0x10a>
    193e:	55 95       	asr	r21
    1940:	47 95       	ror	r20
    1942:	8a 95       	dec	r24
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_enuGetPinValue+0x106>
    1946:	ca 01       	movw	r24, r20
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	ec 81       	ldd	r30, Y+4	; 0x04
    194c:	fd 81       	ldd	r31, Y+5	; 0x05
    194e:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    1950:	19 82       	std	Y+1, r1	; 0x01
    1952:	05 c0       	rjmp	.+10     	; 0x195e <DIO_enuGetPinValue+0x126>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_enuGetPinValue+0x126>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    195e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1960:	27 96       	adiw	r28, 0x07	; 7
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LED_enuInit>:
#include"../../MCAL/DIO/DIO_int.h"
//#include"LED_int.h"
/*
 *
 */
ES_t LED_enuInit(u8 Copy_u8Groupe,u8 Copy_u8Pin){
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <LED_enuInit+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_enuerrorState=ES_OK;
    1982:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Groupe<=DIO_u8GROUP_D&&Copy_u8Pin<=DIO_u8PIN7){
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	48 f4       	brcc	.+18     	; 0x199c <LED_enuInit+0x2a>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	88 30       	cpi	r24, 0x08	; 8
    198e:	30 f4       	brcc	.+12     	; 0x199c <LED_enuInit+0x2a>
		DIO_enuSetPinDirection(Copy_u8Groupe,Copy_u8Pin,DIO_u8OUTPUT);
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	6b 81       	ldd	r22, Y+3	; 0x03
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_enuSetPinDirection>
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <LED_enuInit+0x2e>
	}
	else
		local_enuerrorState=ES_OUT_OF_RANGE;
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	89 83       	std	Y+1, r24	; 0x01
	return local_enuerrorState;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <LED_enuON>:
ES_t LED_enuON(u8 Copy_u8Groupe,u8 Copy_u8Pin){
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <LED_enuON+0x6>
    19b4:	0f 92       	push	r0
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	8a 83       	std	Y+2, r24	; 0x02
    19bc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_enuerrorState=ES_OK;
    19be:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8Groupe<=DIO_u8GROUP_D&&Copy_u8Pin<=DIO_u8PIN7){
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	48 f4       	brcc	.+18     	; 0x19d8 <LED_enuON+0x2a>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 30       	cpi	r24, 0x08	; 8
    19ca:	30 f4       	brcc	.+12     	; 0x19d8 <LED_enuON+0x2a>
			DIO_enuSetPinValue(Copy_u8Groupe,Copy_u8Pin,DIO_u8HIGH);
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	6b 81       	ldd	r22, Y+3	; 0x03
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_enuSetPinValue>
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <LED_enuON+0x2e>
		}
		else
			local_enuerrorState=ES_OUT_OF_RANGE;
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	89 83       	std	Y+1, r24	; 0x01
		return local_enuerrorState;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <LED_enuOFF>:
ES_t LED_enuOFF(u8 Copy_u8Groupe,u8 Copy_u8Pin){
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <LED_enuOFF+0x6>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_enuerrorState=ES_OK;
    19fa:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Groupe<=DIO_u8GROUP_D&&Copy_u8Pin<=DIO_u8PIN7){
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	48 f4       	brcc	.+18     	; 0x1a14 <LED_enuOFF+0x2a>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	88 30       	cpi	r24, 0x08	; 8
    1a06:	30 f4       	brcc	.+12     	; 0x1a14 <LED_enuOFF+0x2a>
	DIO_enuSetPinValue(Copy_u8Groupe,Copy_u8Pin,DIO_u8LOW);
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_enuSetPinValue>
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <LED_enuOFF+0x2e>
}
else
	local_enuerrorState=ES_OUT_OF_RANGE;
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	89 83       	std	Y+1, r24	; 0x01
return local_enuerrorState;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <LED_enuToglle>:
ES_t LED_enuToglle(u8 Copy_u8Groupe,u8 Copy_u8Pin){
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <LED_enuToglle+0x6>
    1a2c:	0f 92       	push	r0
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	8a 83       	std	Y+2, r24	; 0x02
    1a34:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_enuerrorState=ES_OK;
    1a36:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Groupe<=DIO_u8GROUP_D&&Copy_u8Pin<=DIO_u8PIN7){
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	40 f4       	brcc	.+16     	; 0x1a4e <LED_enuToglle+0x28>
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	28 f4       	brcc	.+10     	; 0x1a4e <LED_enuToglle+0x28>
		DIO_enuTogglePinValue(Copy_u8Groupe,Copy_u8Pin);
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	6b 81       	ldd	r22, Y+3	; 0x03
    1a48:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_enuTogglePinValue>
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <LED_enuToglle+0x2c>
	}
	else
		local_enuerrorState=ES_OUT_OF_RANGE;
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	89 83       	std	Y+1, r24	; 0x01
	return local_enuerrorState;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <BUTTON_enuInit>:
 *      Author: fathy
 */
#include"../../LIBRARY/stdTypes.h"
#include"../../LIBRARY/errorState.h"
#include"../../MCAL/DIO/DIO_int.h"
ES_t BUTTON_enuInit(u8 Copy_u8Group,u8 Copy_u8pin){
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <BUTTON_enuInit+0x6>
    1a66:	0f 92       	push	r0
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	8a 83       	std	Y+2, r24	; 0x02
    1a6e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_enuerrorState=ES_OK;
    1a70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Group<=DIO_u8GROUP_D&&Copy_u8pin<=DIO_u8PIN7){
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	70 f4       	brcc	.+28     	; 0x1a94 <BUTTON_enuInit+0x34>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	88 30       	cpi	r24, 0x08	; 8
    1a7c:	58 f4       	brcc	.+22     	; 0x1a94 <BUTTON_enuInit+0x34>
		DIO_enuSetPinDirection(Copy_u8Group,Copy_u8pin,DIO_u8INPUT);
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	6b 81       	ldd	r22, Y+3	; 0x03
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(Copy_u8Group,Copy_u8pin,DIO_u8FLOAT);
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_enuSetPinDirection>
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <BUTTON_enuInit+0x38>
	}
	else
		local_enuerrorState=ES_OUT_OF_RANGE;
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	89 83       	std	Y+1, r24	; 0x01
	return local_enuerrorState;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <BUTTON_enuRead>:
ES_t BUTTON_enuRead(u8 Copy_u8Group,u8 Copy_u8pin,u8 * Copy_u8Value){
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <BUTTON_enuRead+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <BUTTON_enuRead+0x8>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	6b 83       	std	Y+3, r22	; 0x03
    1ab8:	5d 83       	std	Y+5, r21	; 0x05
    1aba:	4c 83       	std	Y+4, r20	; 0x04
	ES_t local_enuerrorState=ES_OK;
    1abc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Group<=DIO_u8GROUP_D&&Copy_u8pin<=DIO_u8PIN7){
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	84 30       	cpi	r24, 0x04	; 4
    1ac2:	58 f4       	brcc	.+22     	; 0x1ada <BUTTON_enuRead+0x34>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	88 30       	cpi	r24, 0x08	; 8
    1ac8:	40 f4       	brcc	.+16     	; 0x1ada <BUTTON_enuRead+0x34>
		DIO_enuGetPinValue(Copy_u8Group,Copy_u8pin,Copy_u8Value);
    1aca:	2c 81       	ldd	r18, Y+4	; 0x04
    1acc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad2:	a9 01       	movw	r20, r18
    1ad4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_enuGetPinValue>
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <BUTTON_enuRead+0x38>
	}
	else
		local_enuerrorState=ES_OUT_OF_RANGE;
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	89 83       	std	Y+1, r24	; 0x01
	return local_enuerrorState;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <GO_INT>:
u8 Car_Light=Green_Led;
u8 LAST_Light=Green_Led;
/*
 * function send to interrupt to do
 */
void GO_INT(void){
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	if(once==0){
    1af8:	80 91 6c 01 	lds	r24, 0x016C
    1afc:	88 23       	and	r24, r24
    1afe:	31 f4       	brne	.+12     	; 0x1b0c <GO_INT+0x1c>
		once++;
    1b00:	80 91 6c 01 	lds	r24, 0x016C
    1b04:	8f 5f       	subi	r24, 0xFF	; 255
    1b06:	80 93 6c 01 	sts	0x016C, r24
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <GO_INT+0x20>
		return ;
	}
	NORMAL_mode=0;
    1b0c:	10 92 68 01 	sts	0x0168, r1
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <APPInit>:
/*
 * function initialize system
 */
void APPInit(void){
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62

// INTILE NORMAL MODE
	LED_enuInit(LED_Green_Group,LED_Green_Pin);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_enuInit>
	LED_enuInit(LED_Yellow_Group,LED_Yellow_Pin);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_enuInit>
    LED_enuInit(LED_Red_Group,LED_Red_Pin);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_enuInit>


    LED_enuInit(LED_Green_Ped_Group,LED_Green_Ped_Pin);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_enuInit>
    LED_enuInit(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_enuInit>
    LED_enuInit(LED_Red_Ped_Group,LED_Red_Ped_Pin);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_enuInit>


    BUTTON_enuInit(BUTTON_Interrupt_Group,BUTTON_Interrupt_Pin);
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <BUTTON_enuInit>


    EXTI_enuInit();
    1b56:	0e 94 35 08 	call	0x106a	; 0x106a <EXTI_enuInit>
    EXTI_enuCallBack(GO_INT,INT0);
    1b5a:	88 e7       	ldi	r24, 0x78	; 120
    1b5c:	9d e0       	ldi	r25, 0x0D	; 13
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	0e 94 16 09 	call	0x122c	; 0x122c <EXTI_enuCallBack>
    GIE_vidEnable();
    1b64:	0e 94 19 08 	call	0x1032	; 0x1032 <GIE_vidEnable>
    Timer_enuInit();
    1b68:	0e 94 e7 06 	call	0xdce	; 0xdce <Timer_enuInit>

}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <APPStrat>:

void APPStrat(){
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	27 97       	sbiw	r28, 0x07	; 7
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
	if(NORMAL_mode||Car_Light==Green_Led||Car_Light==Yellow_Led){
    1b86:	80 91 68 01 	lds	r24, 0x0168
    1b8a:	88 23       	and	r24, r24
    1b8c:	49 f4       	brne	.+18     	; 0x1ba0 <APPStrat+0x2e>
    1b8e:	80 91 6d 01 	lds	r24, 0x016D
    1b92:	88 23       	and	r24, r24
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <APPStrat+0x2e>
    1b96:	80 91 6d 01 	lds	r24, 0x016D
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <APPStrat+0x2e>
    1b9e:	f4 c0       	rjmp	.+488    	; 0x1d88 <APPStrat+0x216>
		//have i press button if i press i make in interrupt normal_mode=0;
		if(!NORMAL_mode){
    1ba0:	80 91 68 01 	lds	r24, 0x0168
    1ba4:	88 23       	and	r24, r24
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <APPStrat+0x3c>
			//make light yellow
			Car_Light=Yellow_Led;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 93 6d 01 	sts	0x016D, r24
		}
		//close green and yellow leds to prevent  pedestrians
		LED_enuOFF(LED_Green_Ped_Group,LED_Green_Ped_Pin);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuOFF(LED_Yellow_Ped_Group,LED_Yellow_Ped_Group);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>

	switch(Car_Light){
    1bbe:	80 91 6d 01 	lds	r24, 0x016D
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3f 83       	std	Y+7, r19	; 0x07
    1bc8:	2e 83       	std	Y+6, r18	; 0x06
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
    1bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	69 f1       	breq	.+90     	; 0x1c2e <APPStrat+0xbc>
    1bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	31 05       	cpc	r19, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <APPStrat+0x6e>
    1bde:	b1 c0       	rjmp	.+354    	; 0x1d42 <APPStrat+0x1d0>
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	09 f0       	breq	.+2      	; 0x1bea <APPStrat+0x78>
    1be8:	2f c1       	rjmp	.+606    	; 0x1e48 <APPStrat+0x2d6>
	case Green_Led:
		LED_enuON(LED_Green_Group,LED_Green_Pin);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
		LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuOFF(LED_Red_Group,LED_Red_Pin);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	62 e0       	ldi	r22, 0x02	; 2
    1bfe:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		for(u8 i=0;i<10;i++){
    1c02:	1d 82       	std	Y+5, r1	; 0x05
    1c04:	0b c0       	rjmp	.+22     	; 0x1c1c <APPStrat+0xaa>
			TIMER_delay(500);
    1c06:	84 ef       	ldi	r24, 0xF4	; 244
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
			//if i press the button on green led
			if(!NORMAL_mode)
    1c0e:	80 91 68 01 	lds	r24, 0x0168
    1c12:	88 23       	and	r24, r24
    1c14:	31 f0       	breq	.+12     	; 0x1c22 <APPStrat+0xb0>
	switch(Car_Light){
	case Green_Led:
		LED_enuON(LED_Green_Group,LED_Green_Pin);
		LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
		LED_enuOFF(LED_Red_Group,LED_Red_Pin);
		for(u8 i=0;i<10;i++){
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	8a 30       	cpi	r24, 0x0A	; 10
    1c20:	90 f3       	brcs	.-28     	; 0x1c06 <APPStrat+0x94>
			TIMER_delay(500);
			//if i press the button on green led
			if(!NORMAL_mode)
				break;
		}
		Car_Light=Yellow_Led;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	80 93 6d 01 	sts	0x016D, r24
		LAST_Light=Green_Led;
    1c28:	10 92 6e 01 	sts	0x016E, r1
    1c2c:	0d c1       	rjmp	.+538    	; 0x1e48 <APPStrat+0x2d6>
		break;
	case Yellow_Led:
		if(!NORMAL_mode){
    1c2e:	80 91 68 01 	lds	r24, 0x0168
    1c32:	88 23       	and	r24, r24
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <APPStrat+0xc6>
    1c36:	3f c0       	rjmp	.+126    	; 0x1cb6 <APPStrat+0x144>
			// i have in red_mode in last
			if(LAST_Light!=Red_Led){
    1c38:	80 91 6e 01 	lds	r24, 0x016E
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	81 f1       	breq	.+96     	; 0x1ca0 <APPStrat+0x12e>
				LED_enuON(LED_Red_Ped_Group,LED_Red_Ped_Pin);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
				// blink both yellow leds
				for(u8 i=0;i<5;i++){
    1c48:	1c 82       	std	Y+4, r1	; 0x04
    1c4a:	27 c0       	rjmp	.+78     	; 0x1c9a <APPStrat+0x128>
					LED_enuON(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
					LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	61 e0       	ldi	r22, 0x01	; 1
    1c58:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
					TIMER_delay(400);
    1c5c:	80 e9       	ldi	r24, 0x90	; 144
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
					LED_enuToglle(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_enuToglle>
					LED_enuToglle(LED_Yellow_Group,LED_Yellow_Pin);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_enuToglle>
					TIMER_delay(200);
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>

					LED_enuON(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
					LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
				    TIMER_delay(400);
    1c8c:	80 e9       	ldi	r24, 0x90	; 144
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
		if(!NORMAL_mode){
			// i have in red_mode in last
			if(LAST_Light!=Red_Led){
				LED_enuON(LED_Red_Ped_Group,LED_Red_Ped_Pin);
				// blink both yellow leds
				for(u8 i=0;i<5;i++){
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	8f 5f       	subi	r24, 0xFF	; 255
    1c98:	8c 83       	std	Y+4, r24	; 0x04
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	85 30       	cpi	r24, 0x05	; 5
    1c9e:	b0 f2       	brcs	.-84     	; 0x1c4c <APPStrat+0xda>

					LED_enuON(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
					LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
				    TIMER_delay(400);
				}}
				LAST_Light=Yellow_Led;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	80 93 6e 01 	sts	0x016E, r24
				Car_Light=Red_Led;
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	80 93 6d 01 	sts	0x016D, r24
				LED_enuON(LED_Red_Group,LED_Red_Pin);
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
    1cb4:	28 c0       	rjmp	.+80     	; 0x1d06 <APPStrat+0x194>
			}
		else {
			for(u8 i=0;i<5;i++){
    1cb6:	1b 82       	std	Y+3, r1	; 0x03
    1cb8:	23 c0       	rjmp	.+70     	; 0x1d00 <APPStrat+0x18e>
				LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>

								TIMER_delay(400);
    1cc2:	80 e9       	ldi	r24, 0x90	; 144
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>

								LED_enuToglle(LED_Yellow_Group,LED_Yellow_Pin);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_enuToglle>
								TIMER_delay(200);
    1cd2:	88 ec       	ldi	r24, 0xC8	; 200
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>


								LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
							    TIMER_delay(400);
    1ce2:	80 e9       	ldi	r24, 0x90	; 144
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
							    if(!NORMAL_mode){
    1cea:	80 91 68 01 	lds	r24, 0x0168
    1cee:	88 23       	and	r24, r24
    1cf0:	21 f4       	brne	.+8      	; 0x1cfa <APPStrat+0x188>
							    	  LAST_Light=Yellow_Led;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 93 6e 01 	sts	0x016E, r24
    1cf8:	06 c0       	rjmp	.+12     	; 0x1d06 <APPStrat+0x194>
				LAST_Light=Yellow_Led;
				Car_Light=Red_Led;
				LED_enuON(LED_Red_Group,LED_Red_Pin);
			}
		else {
			for(u8 i=0;i<5;i++){
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	85 30       	cpi	r24, 0x05	; 5
    1d04:	d0 f2       	brcs	.-76     	; 0x1cba <APPStrat+0x148>

							    }

		}

		LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuOFF(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		if(LAST_Light==Green_Led){
    1d16:	80 91 6e 01 	lds	r24, 0x016E
    1d1a:	88 23       	and	r24, r24
    1d1c:	39 f4       	brne	.+14     	; 0x1d2c <APPStrat+0x1ba>
			LAST_Light=Yellow_Led;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	80 93 6e 01 	sts	0x016E, r24
			Car_Light=Red_Led;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	80 93 6d 01 	sts	0x016D, r24
    1d2a:	8e c0       	rjmp	.+284    	; 0x1e48 <APPStrat+0x2d6>
		}
		else if(LAST_Light==Red_Led){
    1d2c:	80 91 6e 01 	lds	r24, 0x016E
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <APPStrat+0x1c4>
    1d34:	89 c0       	rjmp	.+274    	; 0x1e48 <APPStrat+0x2d6>
			Car_Light=Green_Led;
    1d36:	10 92 6d 01 	sts	0x016D, r1
			LAST_Light=Yellow_Led;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	80 93 6e 01 	sts	0x016E, r24
    1d40:	83 c0       	rjmp	.+262    	; 0x1e48 <APPStrat+0x2d6>
		}
		break;
		case Red_Led:
			LED_enuOFF(LED_Green_Group,LED_Green_Pin);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
			LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
			LED_enuON(LED_Red_Group,LED_Red_Pin);
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
			for(u8 i=0;i<10;i++){
    1d5a:	1a 82       	std	Y+2, r1	; 0x02
    1d5c:	0b c0       	rjmp	.+22     	; 0x1d74 <APPStrat+0x202>
				TIMER_delay(500);
    1d5e:	84 ef       	ldi	r24, 0xF4	; 244
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
				if(!NORMAL_mode){
    1d66:	80 91 68 01 	lds	r24, 0x0168
    1d6a:	88 23       	and	r24, r24
    1d6c:	31 f0       	breq	.+12     	; 0x1d7a <APPStrat+0x208>
		break;
		case Red_Led:
			LED_enuOFF(LED_Green_Group,LED_Green_Pin);
			LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
			LED_enuON(LED_Red_Group,LED_Red_Pin);
			for(u8 i=0;i<10;i++){
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	8a 83       	std	Y+2, r24	; 0x02
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	8a 30       	cpi	r24, 0x0A	; 10
    1d78:	90 f3       	brcs	.-28     	; 0x1d5e <APPStrat+0x1ec>
				TIMER_delay(500);
				if(!NORMAL_mode){
					break;
				}
			}
			Car_Light=Yellow_Led;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 6d 01 	sts	0x016D, r24
			LAST_Light=Red_Led;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	80 93 6e 01 	sts	0x016E, r24
    1d86:	60 c0       	rjmp	.+192    	; 0x1e48 <APPStrat+0x2d6>
			break;

	}
	}
	else{
		LED_enuON(LED_Green_Ped_Group,LED_Green_Ped_Pin);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
		LED_enuOFF(LED_Red_Ped_Group,LED_Red_Pin);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	62 e0       	ldi	r22, 0x02	; 2
    1d94:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuOFF(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>

		LED_enuOFF(LED_Green_Group,LED_Green_Pin);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuON(LED_Red_Group,LED_Red_Pin);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	62 e0       	ldi	r22, 0x02	; 2
    1db4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
		TIMER_delay(5000);
    1db8:	88 e8       	ldi	r24, 0x88	; 136
    1dba:	93 e1       	ldi	r25, 0x13	; 19
    1dbc:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
		LED_enuOFF(LED_Red_Group,LED_Red_Pin);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	62 e0       	ldi	r22, 0x02	; 2
    1dc4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>

		for(u8 i=0;i<5;i++){
    1dc8:	19 82       	std	Y+1, r1	; 0x01
    1dca:	27 c0       	rjmp	.+78     	; 0x1e1a <APPStrat+0x2a8>
							LED_enuON(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
							LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
							TIMER_delay(400);
    1ddc:	80 e9       	ldi	r24, 0x90	; 144
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
							LED_enuToglle(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_enuToglle>
							LED_enuToglle(LED_Yellow_Group,LED_Yellow_Pin);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_enuToglle>
							TIMER_delay(200);
    1df4:	88 ec       	ldi	r24, 0xC8	; 200
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>

							LED_enuON(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
							LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
						    TIMER_delay(400);
    1e0c:	80 e9       	ldi	r24, 0x90	; 144
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 f5 06 	call	0xdea	; 0xdea <TIMER_delay>
		LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
		LED_enuON(LED_Red_Group,LED_Red_Pin);
		TIMER_delay(5000);
		LED_enuOFF(LED_Red_Group,LED_Red_Pin);

		for(u8 i=0;i<5;i++){
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	85 30       	cpi	r24, 0x05	; 5
    1e1e:	b0 f2       	brcs	.-84     	; 0x1dcc <APPStrat+0x25a>

							LED_enuON(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
							LED_enuON(LED_Yellow_Group,LED_Yellow_Pin);
						    TIMER_delay(400);
		}
		LED_enuOFF(LED_Yellow_Group,LED_Yellow_Pin);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>
		LED_enuOFF(LED_Yellow_Ped_Group,LED_Yellow_Ped_Pin);
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LED_enuOFF>

		LED_enuON(LED_Red_Ped_Group,LED_Red_Ped_Pin);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	62 e0       	ldi	r22, 0x02	; 2
    1e34:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_enuON>
		//return to normal mode
		NORMAL_mode=1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	80 93 68 01 	sts	0x0168, r24
		Car_Light=Green_Led;
    1e3e:	10 92 6d 01 	sts	0x016D, r1
		LAST_Light=Yellow_Led;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	80 93 6e 01 	sts	0x016E, r24
	}
}
    1e48:	27 96       	adiw	r28, 0x07	; 7
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <main>:
 *      Author: fathy
 */

#include"APPLICATION/APP.h"
int main()
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	APPInit();
    1e62:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <APPInit>
	while(1){
		APPStrat();
    1e66:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <APPStrat>
    1e6a:	fd cf       	rjmp	.-6      	; 0x1e66 <main+0xc>

00001e6c <__prologue_saves__>:
    1e6c:	2f 92       	push	r2
    1e6e:	3f 92       	push	r3
    1e70:	4f 92       	push	r4
    1e72:	5f 92       	push	r5
    1e74:	6f 92       	push	r6
    1e76:	7f 92       	push	r7
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	ca 1b       	sub	r28, r26
    1e96:	db 0b       	sbc	r29, r27
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	09 94       	ijmp

00001ea4 <__epilogue_restores__>:
    1ea4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ea6:	39 88       	ldd	r3, Y+17	; 0x11
    1ea8:	48 88       	ldd	r4, Y+16	; 0x10
    1eaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eac:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eae:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eb6:	b9 84       	ldd	r11, Y+9	; 0x09
    1eb8:	c8 84       	ldd	r12, Y+8	; 0x08
    1eba:	df 80       	ldd	r13, Y+7	; 0x07
    1ebc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ebe:	fd 80       	ldd	r15, Y+5	; 0x05
    1ec0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ec2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ec4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ec6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ec8:	ce 0f       	add	r28, r30
    1eca:	d1 1d       	adc	r29, r1
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	ed 01       	movw	r28, r26
    1ed8:	08 95       	ret

00001eda <ceil>:
    1eda:	3b d0       	rcall	.+118    	; 0x1f52 <__fp_trunc>
    1edc:	80 f0       	brcs	.+32     	; 0x1efe <ceil+0x24>
    1ede:	9f 37       	cpi	r25, 0x7F	; 127
    1ee0:	40 f4       	brcc	.+16     	; 0x1ef2 <ceil+0x18>
    1ee2:	91 11       	cpse	r25, r1
    1ee4:	0e f4       	brtc	.+2      	; 0x1ee8 <ceil+0xe>
    1ee6:	4d c0       	rjmp	.+154    	; 0x1f82 <__fp_szero>
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 e8       	ldi	r24, 0x80	; 128
    1eee:	9f e3       	ldi	r25, 0x3F	; 63
    1ef0:	08 95       	ret
    1ef2:	26 f0       	brts	.+8      	; 0x1efc <ceil+0x22>
    1ef4:	1b 16       	cp	r1, r27
    1ef6:	61 1d       	adc	r22, r1
    1ef8:	71 1d       	adc	r23, r1
    1efa:	81 1d       	adc	r24, r1
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <__fp_mintl>
    1efe:	1b c0       	rjmp	.+54     	; 0x1f36 <__fp_mpack>

00001f00 <__fp_mintl>:
    1f00:	88 23       	and	r24, r24
    1f02:	71 f4       	brne	.+28     	; 0x1f20 <__fp_mintl+0x20>
    1f04:	77 23       	and	r23, r23
    1f06:	21 f0       	breq	.+8      	; 0x1f10 <__fp_mintl+0x10>
    1f08:	98 50       	subi	r25, 0x08	; 8
    1f0a:	87 2b       	or	r24, r23
    1f0c:	76 2f       	mov	r23, r22
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <__fp_mintl+0x1e>
    1f10:	66 23       	and	r22, r22
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <__fp_mintl+0x18>
    1f14:	99 27       	eor	r25, r25
    1f16:	0d c0       	rjmp	.+26     	; 0x1f32 <__fp_mintl+0x32>
    1f18:	90 51       	subi	r25, 0x10	; 16
    1f1a:	86 2b       	or	r24, r22
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	2a f0       	brmi	.+10     	; 0x1f2c <__fp_mintl+0x2c>
    1f22:	9a 95       	dec	r25
    1f24:	66 0f       	add	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	da f7       	brpl	.-10     	; 0x1f22 <__fp_mintl+0x22>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	96 95       	lsr	r25
    1f30:	87 95       	ror	r24
    1f32:	97 f9       	bld	r25, 7
    1f34:	08 95       	ret

00001f36 <__fp_mpack>:
    1f36:	9f 3f       	cpi	r25, 0xFF	; 255
    1f38:	31 f0       	breq	.+12     	; 0x1f46 <__fp_mpack_finite+0xc>

00001f3a <__fp_mpack_finite>:
    1f3a:	91 50       	subi	r25, 0x01	; 1
    1f3c:	20 f4       	brcc	.+8      	; 0x1f46 <__fp_mpack_finite+0xc>
    1f3e:	87 95       	ror	r24
    1f40:	77 95       	ror	r23
    1f42:	67 95       	ror	r22
    1f44:	b7 95       	ror	r27
    1f46:	88 0f       	add	r24, r24
    1f48:	91 1d       	adc	r25, r1
    1f4a:	96 95       	lsr	r25
    1f4c:	87 95       	ror	r24
    1f4e:	97 f9       	bld	r25, 7
    1f50:	08 95       	ret

00001f52 <__fp_trunc>:
    1f52:	25 d0       	rcall	.+74     	; 0x1f9e <__fp_splitA>
    1f54:	a0 f0       	brcs	.+40     	; 0x1f7e <__fp_trunc+0x2c>
    1f56:	be e7       	ldi	r27, 0x7E	; 126
    1f58:	b9 17       	cp	r27, r25
    1f5a:	88 f4       	brcc	.+34     	; 0x1f7e <__fp_trunc+0x2c>
    1f5c:	bb 27       	eor	r27, r27
    1f5e:	9f 38       	cpi	r25, 0x8F	; 143
    1f60:	60 f4       	brcc	.+24     	; 0x1f7a <__fp_trunc+0x28>
    1f62:	16 16       	cp	r1, r22
    1f64:	b1 1d       	adc	r27, r1
    1f66:	67 2f       	mov	r22, r23
    1f68:	78 2f       	mov	r23, r24
    1f6a:	88 27       	eor	r24, r24
    1f6c:	98 5f       	subi	r25, 0xF8	; 248
    1f6e:	f7 cf       	rjmp	.-18     	; 0x1f5e <__fp_trunc+0xc>
    1f70:	86 95       	lsr	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b1 1d       	adc	r27, r1
    1f78:	93 95       	inc	r25
    1f7a:	96 39       	cpi	r25, 0x96	; 150
    1f7c:	c8 f3       	brcs	.-14     	; 0x1f70 <__fp_trunc+0x1e>
    1f7e:	08 95       	ret

00001f80 <__fp_zero>:
    1f80:	e8 94       	clt

00001f82 <__fp_szero>:
    1f82:	bb 27       	eor	r27, r27
    1f84:	66 27       	eor	r22, r22
    1f86:	77 27       	eor	r23, r23
    1f88:	cb 01       	movw	r24, r22
    1f8a:	97 f9       	bld	r25, 7
    1f8c:	08 95       	ret

00001f8e <__fp_split3>:
    1f8e:	57 fd       	sbrc	r21, 7
    1f90:	90 58       	subi	r25, 0x80	; 128
    1f92:	44 0f       	add	r20, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	59 f0       	breq	.+22     	; 0x1fae <__fp_splitA+0x10>
    1f98:	5f 3f       	cpi	r21, 0xFF	; 255
    1f9a:	71 f0       	breq	.+28     	; 0x1fb8 <__fp_splitA+0x1a>
    1f9c:	47 95       	ror	r20

00001f9e <__fp_splitA>:
    1f9e:	88 0f       	add	r24, r24
    1fa0:	97 fb       	bst	r25, 7
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	61 f0       	breq	.+24     	; 0x1fbe <__fp_splitA+0x20>
    1fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <__fp_splitA+0x2a>
    1faa:	87 95       	ror	r24
    1fac:	08 95       	ret
    1fae:	12 16       	cp	r1, r18
    1fb0:	13 06       	cpc	r1, r19
    1fb2:	14 06       	cpc	r1, r20
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	f2 cf       	rjmp	.-28     	; 0x1f9c <__fp_split3+0xe>
    1fb8:	46 95       	lsr	r20
    1fba:	f1 df       	rcall	.-30     	; 0x1f9e <__fp_splitA>
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <__fp_splitA+0x30>
    1fbe:	16 16       	cp	r1, r22
    1fc0:	17 06       	cpc	r1, r23
    1fc2:	18 06       	cpc	r1, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	f1 cf       	rjmp	.-30     	; 0x1faa <__fp_splitA+0xc>
    1fc8:	86 95       	lsr	r24
    1fca:	71 05       	cpc	r23, r1
    1fcc:	61 05       	cpc	r22, r1
    1fce:	08 94       	sec
    1fd0:	08 95       	ret

00001fd2 <_exit>:
    1fd2:	f8 94       	cli

00001fd4 <__stop_program>:
    1fd4:	ff cf       	rjmp	.-2      	; 0x1fd4 <__stop_program>
